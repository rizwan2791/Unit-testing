package com.aurionpro.model;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
@TestInstance(TestInstance.Lifecycle.PER_CLASS)

public class MathUtilTest {
	MathUtil math;
	@Disabled
	@Test
	void test(){

		fail("These Test Failed");
	}
	
	@BeforeAll
	void beforeAll() {
		System.out.println("Printing before All");
	}
	
	@BeforeEach
	void beforeEach() {
		math=new MathUtil();
		System.out.println("Printing before Each");
		
	}
	
	
	@Test
	@DisplayName("Check addition of positive Integers")
	void testAddNum_checkPositiveInteger() {
		int expected = 10;
		int actual = math.addNum(5, 5);
		assertEquals(expected, actual);
	}
	
	@Test
	void testAddNum_checkPositiveIntegerAndZero() {
		int expected = 5;
		int actual = math.addNum(5, 0);
		assertEquals(expected, actual);
	}
	
	@Test
	void testAddNum_checkNegativeInteger() {
		int expected = 10;
		int actual = math.addNum(-5, -5);
		assertEquals(expected, actual);
	}

	@Test
	void testDivNum_checkDivisionByPositiveNumber() {
		int expected = 5;
		int actual = math.divNum(10, 2);
		assertEquals(expected, actual);
	}
	
	@Test
	void testDivNum_checkDivisionByNegativetiveNumber() {
		int expected = -5;
		int actual = math.divNum(10,-2);
		assertEquals(expected, actual);
	}
	@Test
	void testDivNum_checkDivisionByZero() {
		int expected = -5;
		int actual = math.divNum(10,0);
		assertEquals(expected, actual);
	}
	
	@Test
	void TestDevideNumber_checkArithmaticException() {
		assertThrows(ArithmeticException.class, ()->math.divNum(10, 20));
	}
	
	@Test
	void testEqualArrays() {
		int a[]= {10,20,30,40,50};
		int b[]= {10,20,30,40,50};
		assertArrayEquals(a, b);
	}
	
	
	
	
}
